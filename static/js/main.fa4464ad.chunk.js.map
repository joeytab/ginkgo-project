{"version":3,"sources":["ginkgo_logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","props","handleInputChange","event","target","name","value","currSeq","state","setState","renderItems","results","Table","singleLine","Header","Body","map","el","console","log","Row","Cell","sequence","e_val","length","query","match","subject","handleSubmit","a","str","document","getElementsByName","axios","post","res","data","prevSearches","push","table","renderAlignments","alignments","tableHtml","bind","this","className","src","logo","size","type","placeholder","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fa4464ad.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/ginkgo_logo.41dd2bdd.svg\";","import React, {Component, useState} from \"react\";\nimport logo from './ginkgo_logo.svg';\nimport './App.css';\nimport axios from \"axios\";\nimport { Table } from \"semantic-ui-react\";\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      prevSearches: [],\n      currSeq: {sequence: \"\", alignments: []},\n      tableHtml: \"\"\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n\n  handleInputChange = (event) =>{\n    const { name, value } = event.target;\n    const currSeq = {...this.state.currSeq, [name] : value};\n    this.setState({\n      currSeq\n    });\n  }\nrenderItems = (results) =>{\n  return (\n    \n  <Table singleLine>\n    <Table.Header>\n      <tr>\n        <th>Sequence</th>\n        <th>E value</th>\n        <th>Length</th> \n        <th>Query</th>\n        <th>Match</th>\n        <th>Subject</th>\n      </tr>\n    </Table.Header>\n\n    <Table.Body>\n        {results.map(el => {\n          console.log(el);\n           return(\n            <Table.Row key={el.sequence}>\n              <Table.Cell> {el.sequence} </Table.Cell>\n              <Table.Cell>{el.e_val}</Table.Cell>\n              <Table.Cell> {el.length} </Table.Cell>\n              <Table.Cell> {el.query} </Table.Cell>\n              <Table.Cell> {el.match} </Table.Cell>\n              <Table.Cell> {el.subject} </Table.Cell>\n            </Table.Row>\n          );\n        })}\n      </Table.Body>\n  </Table>\n          )\n};\n\n  handleSubmit = async() =>\n  {\n    var str = document.getElementsByName(\"sequence\")[0].value;\n    this.setState({\"sequence\" : str})\n    var res = await axios\n      .post(`/api/nt_searches/`, str);\n    const data = res.data;\n    this.setState({\"alignments\" : data});\n  \n    this.state.prevSearches.push(data);\n    console.log(this.state.prevSearches)\n    const table = this.renderAlignments();\n    this.setState({\"tableHtml\": table});\n  };\n\n  renderAlignments(){\n    console.log(\"render alignments\");\n    const results = this.state.prevSearches;\n    console.log(results);\n    console.log(results[0]);\n    if(results.length == 0){\n      console.log(\"No searches yet\")\n    }\n    return(\n      results.map(el => {\n        return (this.renderItems(el));\n      })\n    );\n  }\nrender() {\n  return (\n    <main className=\"Container\">\n        <center> <img src={logo} className=\"App-logo\"  /> </center>\n         <center>\n        <font size=\"+2\"><b>Ginkgo DNA Alignment Tool Prototype </b> </font> </center> <br></br>\n        <p >\n          Enter a DNA sequence to query blast for matches from the following genomes: <br></br>\n          NC_000852, NC_007346, NC_008724, NC_009899, NC_014637, NC_020104, NC_023423, NC_023640, NC_023719,\n          NC_027867 <br></br>\n          <br></br>\n          <b>Output gives: </b><br></br>\n          Sequence: the Blast result for organism and accession code <br></br>\n          e_val: the expected value returned by blast, indicating significance of result <br></br>\n          length: the length of the aligned sequence <br></br>\n          query: the sequence searched <br></br>\n          match: a string of the positions that are the same in each string <br></br>\n          subject: the string to which the query is aligned \n        \n        </p>\n        <label>\n            Enter DNA sequence:\n            <input\n              name=\"sequence\"\n              type=\"text\"\n              placeholder=\"DNA Sequence\"\n            />\n          </label>\n        <button onClick={this.handleSubmit}\n        > Query </button>\n        {this.state.tableHtml}\n\n    </main>\n  );\n};\n};\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}